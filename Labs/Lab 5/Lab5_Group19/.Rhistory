library(plotly)
library(crosstalk)
library(tidyr)
library(ggplot2)
library(GGally)
olive <- read.csv("olive.csv")
d <- SharedData$new(olive)
scatterOlive <- plot_ly(d, x = ~linoleic, y = ~eicosenoic) %>%
add_markers(color = I("black")) %>%
layout(xaxis=list(title="Linoleic"), yaxis=list(title="Eicosenoic"))
scatterOlive
barOlive <- plot_ly(d, x=~as.factor(Region)) %>% add_histogram() %>%
layout(barmode="overlay",xaxis=list(title="Region"))
bscols(widths=c(2, NA),filter_slider("stearic", "values of stearic", d, ~stearic)
,subplot(scatterOlive,barOlive,titleY = TRUE,  titleX = TRUE)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend())
scatterOlive_2 <- plot_ly(d, x = ~linoleic, y = ~arachidic) %>%
add_markers(color = I("black")) %>%
layout(xaxis=list(title="Linoleic"), yaxis=list(title="Arachidic"))
subplot(scatterOlive,scatterOlive_2,  titleY = TRUE,  titleX = TRUE)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend()
scatterOlive_2 <- plot_ly(d, x = ~linoleic, y = ~arachidic) %>%
add_markers(color = I("black")) %>%
layout(xaxis=list(title="Linoleic"), yaxis=list(title="Arachidic"))
subplot(scatterOlive,scatterOlive_2,  titleY = TRUE,  titleX = TRUE)%>%
highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%hide_legend()
p<-ggparcoord(olive, columns = c(4:11))
d<-plotly_data(ggplotly(p))%>%group_by(.ID)
d1<-SharedData$new(d, ~.ID, group="olive")
p1<-plot_ly(d1, x=~variable, y=~value)%>%add_lines(line=list(width=0.3))%>%
add_markers(marker=list(size=0.3),text=~.ID, hoverinfo="text")
olive2=olive
olive2$.ID=1:nrow(olive)
d2<-SharedData$new(olive2, ~.ID, group="olive")
p2<-plot_ly(d2, x=~factor(Region) )%>%add_histogram()%>%layout(title = "Region",barmode="overlay")
ButtonsX=list()
for (i in 4:11){
ButtonsX[[i-3]]= list(method = "restyle",
args = list( "x", list(olive[[i]])),
label = colnames(olive)[i])
}
ButtonsY=list()
for (i in 4:11){
ButtonsY[[i-3]]= list(method = "restyle",
args = list( "y", list(olive[[i]])),
label = colnames(olive)[i])
}
ButtonsZ=list()
for (i in 4:11){
ButtonsZ[[i-3]]= list(method = "restyle",
args = list( "z", list(olive[[i]])),
label = colnames(olive)[i])
}
p3 <- plot_ly(d2, x=~palmitic, y=~stearic, z=~oleic, alpha = 0.8) %>%
add_markers() %>%
layout(xaxis=list(title=""), yaxis=list(title=""), zaxis=list(title=""),
title = "Select variable:",
updatemenus = list(
list(y=1.00, buttons = ButtonsX),
list(y=0.85, buttons = ButtonsY),
list(y=0.70, buttons = ButtonsZ)
)  )
bscols(p1%>%highlight(on="plotly_select", dynamic=T, persistent = T, opacityDim = I(1))%>%
hide_legend(),
p3%>%highlight(on="plotly_click", dynamic=T, persistent = T)%>%hide_legend(),
p2%>%highlight(on="plotly_click", dynamic=T, persistent = T)%>%hide_legend())
# User input
nSim <- 10
sigmaF <- 0.1
l <- 2
#install.packages("mvtnorm")
library("mvtnorm")
# Setting up the kernel
SquaredExpKernel <- function(x1,x2,sigmaF=1,l=3){
n1 <- length(x1)
n2 <- length(x2)
K <- matrix(NA,n1,n2)
for (i in 1:n2){
K[,i] <- sigmaF^2*exp(-0.5*( (x1-x2[i])/l)^2 )
}
return(K)
}
MeanFunc <- function(x){
m <- sin(x)
return(m)
}
SimGP <- function(m = 0,K,x,nSim,...){
# Simulates nSim realizations (function) form a Gaussian process with mean m(x) and covariance K(x,x')
# over a grid of inputs (x)
n <- length(x)
if (is.numeric(m)) meanVector <- rep(0,n) else meanVector <- m(x)
covMat <- K(x,x,...)
f <- rmvnorm(n, mean = meanVector, sigma = covMat)
return(f)
}
xGrid <- seq(-5,5,length=20)
fSim <- SimGP(m=MeanFunc, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, l)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3))
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
lines(xGrid,MeanFunc(xGrid), col = "red", lwd = 3)
# Plotting using manipulate package
library(manipulate)
plotGPPrior <- function(sigmaF, l, nSim){
fSim <- SimGP(m=MeanFunc, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, l)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), ylab="f(x)", xlab="x")
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
lines(xGrid,MeanFunc(xGrid), col = "red", lwd = 3)
title(paste('length scale =',l,', sigmaf =',sigmaF))
}
install.packages("manipulate")
library("manipulate", lib.loc="~/R/win-library/3.5")
# Plotting using manipulate package
library(manipulate)
plotGPPrior <- function(sigmaF, l, nSim){
fSim <- SimGP(m=MeanFunc, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, l)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), ylab="f(x)", xlab="x")
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
lines(xGrid,MeanFunc(xGrid), col = "red", lwd = 3)
title(paste('length scale =',l,', sigmaf =',sigmaF))
}
manipulate(
plotGPPrior(sigmaF, l, nSim = 10),
sigmaF = slider(0, 2, step=0.1, initial = 1, label = "SigmaF"),
l = slider(0, 2, step=0.1, initial = 1, label = "Length scale, l")
)
